/*
 * This file is generated by jOOQ.
 */
package org.gdg.withgo.data.database;


import javax.annotation.Generated;

import org.gdg.withgo.data.database.tables.Account;
import org.gdg.withgo.data.database.tables.Applicant;
import org.gdg.withgo.data.database.tables.Event;
import org.gdg.withgo.data.database.tables.Ticket;
import org.gdg.withgo.data.database.tables.records.AccountRecord;
import org.gdg.withgo.data.database.tables.records.ApplicantRecord;
import org.gdg.withgo.data.database.tables.records.EventRecord;
import org.gdg.withgo.data.database.tables.records.TicketRecord;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<EventRecord, Integer> IDENTITY_EVENT = Identities0.IDENTITY_EVENT;
    public static final Identity<TicketRecord, Integer> IDENTITY_TICKET = Identities0.IDENTITY_TICKET;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = UniqueKeys0.ACCOUNT_PKEY;
    public static final UniqueKey<AccountRecord> ACCOUNT_NAME_KEY = UniqueKeys0.ACCOUNT_NAME_KEY;
    public static final UniqueKey<AccountRecord> ACCOUNT_EMAIL_KEY = UniqueKeys0.ACCOUNT_EMAIL_KEY;
    public static final UniqueKey<AccountRecord> ACCOUNT_PHONE_KEY = UniqueKeys0.ACCOUNT_PHONE_KEY;
    public static final UniqueKey<ApplicantRecord> APPLICANT_PKEY = UniqueKeys0.APPLICANT_PKEY;
    public static final UniqueKey<EventRecord> EVENT_PKEY = UniqueKeys0.EVENT_PKEY;
    public static final UniqueKey<TicketRecord> TICKET_PKEY = UniqueKeys0.TICKET_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ApplicantRecord, EventRecord> APPLICANT__APPLICANT_EVENT_ID_FKEY = ForeignKeys0.APPLICANT__APPLICANT_EVENT_ID_FKEY;
    public static final ForeignKey<ApplicantRecord, TicketRecord> APPLICANT__APPLICANT_TICKET_ID_FKEY = ForeignKeys0.APPLICANT__APPLICANT_TICKET_ID_FKEY;
    public static final ForeignKey<ApplicantRecord, AccountRecord> APPLICANT__APPLICANT_USER_ID_FKEY = ForeignKeys0.APPLICANT__APPLICANT_USER_ID_FKEY;
    public static final ForeignKey<EventRecord, AccountRecord> EVENT__EVENT_OWNER_ID_FKEY = ForeignKeys0.EVENT__EVENT_OWNER_ID_FKEY;
    public static final ForeignKey<TicketRecord, EventRecord> TICKET__TICKET_EVENT_ID_FKEY = ForeignKeys0.TICKET__TICKET_EVENT_ID_FKEY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccountRecord, Integer> IDENTITY_ACCOUNT = Internal.createIdentity(Account.ACCOUNT, Account.ACCOUNT.ID);
        public static Identity<EventRecord, Integer> IDENTITY_EVENT = Internal.createIdentity(Event.EVENT, Event.EVENT.ID);
        public static Identity<TicketRecord, Integer> IDENTITY_TICKET = Internal.createIdentity(Ticket.TICKET, Ticket.TICKET.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, "account_pkey", Account.ACCOUNT.ID);
        public static final UniqueKey<AccountRecord> ACCOUNT_NAME_KEY = Internal.createUniqueKey(Account.ACCOUNT, "account_name_key", Account.ACCOUNT.NAME);
        public static final UniqueKey<AccountRecord> ACCOUNT_EMAIL_KEY = Internal.createUniqueKey(Account.ACCOUNT, "account_email_key", Account.ACCOUNT.EMAIL);
        public static final UniqueKey<AccountRecord> ACCOUNT_PHONE_KEY = Internal.createUniqueKey(Account.ACCOUNT, "account_phone_key", Account.ACCOUNT.PHONE);
        public static final UniqueKey<ApplicantRecord> APPLICANT_PKEY = Internal.createUniqueKey(Applicant.APPLICANT, "applicant_pkey", Applicant.APPLICANT.EVENT_ID, Applicant.APPLICANT.USER_ID);
        public static final UniqueKey<EventRecord> EVENT_PKEY = Internal.createUniqueKey(Event.EVENT, "event_pkey", Event.EVENT.ID);
        public static final UniqueKey<TicketRecord> TICKET_PKEY = Internal.createUniqueKey(Ticket.TICKET, "ticket_pkey", Ticket.TICKET.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<ApplicantRecord, EventRecord> APPLICANT__APPLICANT_EVENT_ID_FKEY = Internal.createForeignKey(org.gdg.withgo.data.database.Keys.EVENT_PKEY, Applicant.APPLICANT, "applicant__applicant_event_id_fkey", Applicant.APPLICANT.EVENT_ID);
        public static final ForeignKey<ApplicantRecord, TicketRecord> APPLICANT__APPLICANT_TICKET_ID_FKEY = Internal.createForeignKey(org.gdg.withgo.data.database.Keys.TICKET_PKEY, Applicant.APPLICANT, "applicant__applicant_ticket_id_fkey", Applicant.APPLICANT.TICKET_ID);
        public static final ForeignKey<ApplicantRecord, AccountRecord> APPLICANT__APPLICANT_USER_ID_FKEY = Internal.createForeignKey(org.gdg.withgo.data.database.Keys.ACCOUNT_PKEY, Applicant.APPLICANT, "applicant__applicant_user_id_fkey", Applicant.APPLICANT.USER_ID);
        public static final ForeignKey<EventRecord, AccountRecord> EVENT__EVENT_OWNER_ID_FKEY = Internal.createForeignKey(org.gdg.withgo.data.database.Keys.ACCOUNT_PKEY, Event.EVENT, "event__event_owner_id_fkey", Event.EVENT.OWNER_ID);
        public static final ForeignKey<TicketRecord, EventRecord> TICKET__TICKET_EVENT_ID_FKEY = Internal.createForeignKey(org.gdg.withgo.data.database.Keys.EVENT_PKEY, Ticket.TICKET, "ticket__ticket_event_id_fkey", Ticket.TICKET.EVENT_ID);
    }
}
