/*
 * This file is generated by jOOQ.
 */
package org.gdg.withgo.data.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.gdg.withgo.data.database.Indexes;
import org.gdg.withgo.data.database.Keys;
import org.gdg.withgo.data.database.Public;
import org.gdg.withgo.data.database.tables.records.ApplicantRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Applicant extends TableImpl<ApplicantRecord> {

    private static final long serialVersionUID = 1667220681;

    /**
     * The reference instance of <code>public.applicant</code>
     */
    public static final Applicant APPLICANT = new Applicant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicantRecord> getRecordType() {
        return ApplicantRecord.class;
    }

    /**
     * The column <code>public.applicant.event_id</code>.
     */
    public final TableField<ApplicantRecord, Integer> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.applicant.ticket_id</code>.
     */
    public final TableField<ApplicantRecord, Integer> TICKET_ID = createField("ticket_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.applicant.user_id</code>.
     */
    public final TableField<ApplicantRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.applicant</code> table reference
     */
    public Applicant() {
        this(DSL.name("applicant"), null);
    }

    /**
     * Create an aliased <code>public.applicant</code> table reference
     */
    public Applicant(String alias) {
        this(DSL.name(alias), APPLICANT);
    }

    /**
     * Create an aliased <code>public.applicant</code> table reference
     */
    public Applicant(Name alias) {
        this(alias, APPLICANT);
    }

    private Applicant(Name alias, Table<ApplicantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Applicant(Name alias, Table<ApplicantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Applicant(Table<O> child, ForeignKey<O, ApplicantRecord> key) {
        super(child, key, APPLICANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLICANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicantRecord> getPrimaryKey() {
        return Keys.APPLICANT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicantRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicantRecord>>asList(Keys.APPLICANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ApplicantRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ApplicantRecord, ?>>asList(Keys.APPLICANT__APPLICANT_EVENT_ID_FKEY, Keys.APPLICANT__APPLICANT_TICKET_ID_FKEY, Keys.APPLICANT__APPLICANT_USER_ID_FKEY);
    }

    public Event event() {
        return new Event(this, Keys.APPLICANT__APPLICANT_EVENT_ID_FKEY);
    }

    public Ticket ticket() {
        return new Ticket(this, Keys.APPLICANT__APPLICANT_TICKET_ID_FKEY);
    }

    public Account account() {
        return new Account(this, Keys.APPLICANT__APPLICANT_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applicant as(String alias) {
        return new Applicant(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applicant as(Name alias) {
        return new Applicant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Applicant rename(String name) {
        return new Applicant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applicant rename(Name name) {
        return new Applicant(name, null);
    }
}
